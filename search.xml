<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024磐石SMC</title>
      <link href="/2024/08/20/2024%E7%A3%90%E7%9F%B3SMC/"/>
      <url>/2024/08/20/2024%E7%A3%90%E7%9F%B3SMC/</url>
      
        <content type="html"><![CDATA[<p>“””这是关于上海的磐石行动的逆向题目：”””</p><h1 id="今天天气怎么样"><a href="#今天天气怎么样" class="headerlink" title="今天天气怎么样"></a>今天天气怎么样</h1><p>这题目中给出的是一个32bit的程序。：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820170811658.png" alt="image-20240820170811658"></p><p>看看这到题，前面式一个正常的判断的过程，首先是输入一个字符串str是一个30长度的。flag的长度就是30，对输入的长度进行了判断，之后是一个crazy()函数，可已跟进去：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820170841971.png" alt="image-20240820170841971"></p><p>这里就是在进行奇偶进行减法和异或的操作偶数减去索引，奇数异或索引。</p><p>下面还有一个ohh函数：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820170908559.png" alt="image-20240820170908559"></p><p>这里就进行的了最后的判断这里与unk_4040C0进行对比：</p><p>提取出unk_4040C0的数据：</p><pre><code>0x66, 0x6B, 0x63, 0x64, 0x7F, 0x63, 0x69, 0x70, 0x57, 0x60,0x79, 0x54, 0x78, 0x5B, 0x6B, 0x50, 0x67, 0x54, 0x73, 0x61,0x7C, 0x50, 0x64, 0x48, 0x6C, 0x56, 0x7E, 0x46, 0x65, 0x60</code></pre><p>下面就是写出脚本进行处理：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_crazy</span>(<span class="params">input_str</span>):</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            result += <span class="built_in">chr</span>(<span class="built_in">ord</span>(input_str[i]) ^ i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result += <span class="built_in">chr</span>(<span class="built_in">ord</span>(input_str[i]) + i)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># unk_4040C0的内容</span></span><br><span class="line">unk_4040C0 = [</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x6B</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x7F</span>, <span class="number">0x63</span>, <span class="number">0x69</span>, <span class="number">0x70</span>, <span class="number">0x57</span>, <span class="number">0x60</span>,</span><br><span class="line">    <span class="number">0x79</span>, <span class="number">0x54</span>, <span class="number">0x78</span>, <span class="number">0x5B</span>, <span class="number">0x6B</span>, <span class="number">0x50</span>, <span class="number">0x67</span>, <span class="number">0x54</span>, <span class="number">0x73</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0x7C</span>, <span class="number">0x50</span>, <span class="number">0x64</span>, <span class="number">0x48</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0x7E</span>, <span class="number">0x46</span>, <span class="number">0x65</span>, <span class="number">0x60</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将unk_4040C0的内容转换为字符串</span></span><br><span class="line">input_str = <span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> unk_4040C0)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆向crazy函数的变换操作</span></span><br><span class="line">flag = reverse_crazy(input_str)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag:&quot;</span>, flag)</span><br><span class="line"><span class="comment"># Flag: flag&#123;how_is_the_weather_today&#125;</span></span><br></pre></td></tr></table></figure><p>这是个错误的flag：</p><p>其实下面才是真正的flag出现的地方</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171001804.png" alt="image-20240820171001804"></p><p>发现这里是smc操作其实就是代码加密混淆了：</p><p>这里就是将原有的函数进行了异或0x41的操作，要想得到my_function这个函数，就需要再次异或回去。本想着直接动调恢复到源码，结果发现，这里的调用函数的思路不同，上面的动调恢复到方法只适合在这里还是函数的时候，而这里是当作偏移量传递给了lpAddress这个。这样就直接静态调试好了，直接进行异或的操作：在IDA中运行脚本：</p><p>这里可以自己计算，也可以拿脚本计算</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">star = 0x403000</span><br><span class="line">end = star+0x183</span><br><span class="line">for i in range(star,end+1):</span><br><span class="line">patch_byte(i,get_wide_byte(i)^0x41)</span><br><span class="line">print(&quot;解密完成&quot;)</span><br></pre></td></tr></table></figure><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171025548.png" alt="image-20240820171025548"></p><p>这是开始第地方，查看它的起始地址：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171038292.png" alt="image-20240820171038292"></p><p>上面是异或前的样子，下面是运行脚本后的样子：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171050907.png" alt="image-20240820171050907"></p><p>使其变成C语言：按c键</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171108082.png" alt="image-20240820171108082"></p><p>先是Force在是yes：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171125624.png" alt="image-20240820171125624"></p><p>之后是按下p键：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171135969.png" alt="image-20240820171135969"></p><p>这里就是异或后的函数，这时就可以F5了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void __cdecl __noreturn my_function(const char *a1)</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int v1; // eax</span><br><span class="line">  char Str[50]; // [esp+16h] [ebp-2D2h] BYREF</span><br><span class="line">  int v3[30]; // [esp+48h] [ebp-2A0h] BYREF</span><br><span class="line">  unsigned __int8 v4[256]; // [esp+C0h] [ebp-228h] BYREF</span><br><span class="line">  char v5[256]; // [esp+1C0h] [ebp-128h] BYREF</span><br><span class="line">  unsigned int v6; // [esp+2C0h] [ebp-28h]</span><br><span class="line">  unsigned int j; // [esp+2C4h] [ebp-24h]</span><br><span class="line">  int v8; // [esp+2C8h] [ebp-20h]</span><br><span class="line">  int i; // [esp+2CCh] [ebp-1Ch]</span><br><span class="line"></span><br><span class="line">  puts(&quot;please input your True flag:&quot;);</span><br><span class="line">  scanf(&quot;%40s&quot;, Str);</span><br><span class="line">  v6 = strlen(Str);</span><br><span class="line">  if ( v6 != 30 )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Wrong!&quot;);</span><br><span class="line">    exit(0);</span><br><span class="line">  &#125;</span><br><span class="line">  qmemcpy(v3, &amp;unk_404040, sizeof(v3));</span><br><span class="line">  memset(v4, 0, sizeof(v4));</span><br><span class="line">  memset(v5, 0, sizeof(v5));</span><br><span class="line">  v1 = strlen(a1);</span><br><span class="line">  xxx_init(v4, (unsigned __int8 *)a1, v1);</span><br><span class="line">  for ( i = 0; i &lt;= 255; ++i )</span><br><span class="line">    v5[i] = v4[i];</span><br><span class="line">  xxx_crypt(v4, (unsigned __int8 *)Str, v6);</span><br><span class="line">  v8 = 1;</span><br><span class="line">  for ( j = 0; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( j &gt;= v6 )</span><br><span class="line">      goto LABEL_11;</span><br><span class="line">    if ( (unsigned __int8)Str[j] != v3[j] )</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line">  v8 = 0;</span><br><span class="line">LABEL_11:</span><br><span class="line">  if ( v8 )</span><br><span class="line">    puts(&quot;Good! have a beautiful day for you!&quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;May be try again?&quot;);</span><br><span class="line">  exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是完整的my_function(const char *a1)函数：</p><p>这里有一个参数：a1是上一次加密后的一个字符串：flag{how_is_the_weather_today}</p><p>在这个函数中可以看到：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171232354.png" alt="image-20240820171232354"></p><p>有两个函数，一个是初始化，一个是真正的加密，跟进去：</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171243656.png" alt="image-20240820171243656"></p><p>这里是想讲先是构造一个0，255的数组，后面就是进行值与值的交换。</p><p><img src="/./../image/2024%E7%A3%90%E7%9F%B3SMC/image-20240820171255284.png" alt="image-20240820171255284"></p><p>这里主要的就是进行了异或的操作，最终得脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v3 = [<span class="number">0x4D</span>, <span class="number">0xD8</span>, <span class="number">0x76</span>, <span class="number">0x2D</span>, <span class="number">0x0C</span>, <span class="number">0x26</span>, <span class="number">0x0C</span>, <span class="number">0x53</span>, <span class="number">0xDA</span>, <span class="number">0xC0</span>, </span><br><span class="line">      <span class="number">0x17</span>, <span class="number">0x37</span>, <span class="number">0x8C</span>, <span class="number">0xD7</span>, <span class="number">0xF3</span>, <span class="number">0xD9</span>, <span class="number">0xD0</span>, <span class="number">0x46</span>, <span class="number">0x2B</span>, <span class="number">0x15</span>,</span><br><span class="line">      <span class="number">0x98</span>, <span class="number">0x67</span>, <span class="number">0xF1</span>, <span class="number">0xAD</span>, <span class="number">0xA6</span>, <span class="number">0x0E</span>, <span class="number">0x7C</span>, <span class="number">0x66</span>, <span class="number">0x90</span>, <span class="number">0x7F</span></span><br><span class="line">    ]</span><br><span class="line">seed = <span class="string">&quot;flag&#123;how_is_the_weather_today&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xxx_init</span>(<span class="params">seed</span>):</span><br><span class="line">    a1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + a1[i] + <span class="built_in">ord</span>(seed[i % <span class="built_in">len</span>(seed)])) % <span class="number">256</span></span><br><span class="line">        a1[i], a1[j] = a1[j], a1[i]</span><br><span class="line">    <span class="keyword">return</span> a1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xxx_crypt</span>(<span class="params">a1, data</span>):</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    out = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> data:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + a1[i]) % <span class="number">256</span></span><br><span class="line">        a1[i], a1[j] = a1[j], a1[i]</span><br><span class="line">        out.append(c ^ a1[(a1[i] + a1[j]) % <span class="number">256</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(out)</span><br><span class="line"></span><br><span class="line">a1 = xxx_init(seed)</span><br><span class="line"></span><br><span class="line">flag = xxx_crypt(a1, <span class="built_in">bytes</span>(v3))</span><br><span class="line"><span class="built_in">print</span>(flag.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># flag&#123;This_is_a_beautiful_day!&#125;</span></span><br></pre></td></tr></table></figure><p>这里得v3的值unk_404040：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v3 = [0x4D, 0xD8, 0x76, 0x2D, 0x0C, 0x26, 0x0C, 0x53, 0xDA, 0xC0, </span><br><span class="line">      0x17, 0x37, 0x8C, 0xD7, 0xF3, 0xD9, 0xD0, 0x46, 0x2B, 0x15,</span><br><span class="line">      0x98, 0x67, 0xF1, 0xAD, 0xA6, 0x0E, 0x7C, 0x66, 0x90, 0x7F</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> SMC </tag>
            
            <tag> 磐石行动初赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不知名的比赛题目</title>
      <link href="/2024/08/20/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/"/>
      <url>/2024/08/20/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="题目一：click-me-apk"><a href="#题目一：click-me-apk" class="headerlink" title="题目一：click_me.apk"></a>题目一：click_me.apk</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>拿到题目先去看看功能，同时反编译：<br>本次使用的是雷电模拟器9，安装后打开效果如下，这个效果很熟悉，连点嘛。</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820034920558.png" alt="image-20240820034920558"></p><p>jadx反编译看逻辑：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820035234644.png" alt="image-20240820035234644"></p><p>先看一下Main类：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820035911868.png" alt="image-20240820035911868"></p><p>这里就是主要的部分了，这里其实就是逻辑点：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> String <span class="title function_">getFlag</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>这里很明显，getFlag()在native层中，这里很明显可以想到，直接通过frida的脚本（js、python）直接进行截取就行，看看触发条件，这时其实已经猜的差不多了，应该时点击达到一定的数目，可以触发点击getflag按钮：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820040344148.png" alt="image-20240820040344148"></p><p>看看这里的两个方法，很搞笑，明显的对于CLICKS进行计数，可是还晃一下，文本框最多显示13371337下，实际需要达到99999999下，搞什么，当点击的数达到999999999下后，可以触发getFlag()函数。思路清晰，启动frida，显示在这个类中赋值给CLICKDS，然后点击按钮触发方法，截取flag：</p><p>脚本(这里就直接用js脚本，其实python脚本的格式要多多一点，但是操作简单)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.clickme.MainActivity&#x27;</span>);</span><br><span class="line">    <span class="title class_">MainActivity</span>.<span class="property">getFlagButtonClick</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">view</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;方法调用成功&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">CLICKS</span>.<span class="property">value</span> = <span class="number">99999999</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CLICKS value set to: &quot;</span> + <span class="variable language_">this</span>.<span class="property">CLICKS</span>.<span class="property">value</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getFlagButtonClick</span>(view);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//触发条件：点击按钮</span></span><br><span class="line">    <span class="title class_">MainActivity</span>.<span class="property">getFlag</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;方法调用成功&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getFlag</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getFlag() result: &#x27;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="利用过程-我这里写的略微详细一下，以防忘记操作"><a href="#利用过程-我这里写的略微详细一下，以防忘记操作" class="headerlink" title="利用过程(我这里写的略微详细一下，以防忘记操作)"></a>利用过程(我这里写的略微详细一下，以防忘记操作)</h2><ol><li>打开adb服务，然后进如模拟器，打开frida服务，这里是需要自己去上传对应的版本服务的：</li></ol><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820042204683.png" alt="image-20240820042204683"></p><p>到这里就说明已经开启了frida服务：</p><ol start="2"><li><p>下面就可以使用脚本了：</p><p>使用的命令：frida -U -f com.example.clickme -l xxxx.js(脚本名称)</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820043118483.png" alt="image-20240820043118483"></p></li></ol><p>这里就顺利的得到flag：flag{849d9e5421c59358ee4d568adebc5a70}</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820043319830.png" alt="image-20240820043319830"></p><p>这里就是那个表面搞笑的显示。</p><h1 id="题目二：Run"><a href="#题目二：Run" class="headerlink" title="题目二：Run"></a>题目二：Run</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>同样是先去看看关键词：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820044151951.png" alt="image-20240820044151951"></p><p>画风简洁，这就是啥，一个标题，一个按钮，一句欢迎您！！！</p><p>还是看看反编译的结果：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820044318208.png" alt="image-20240820044318208"></p><p>好家伙，这还加上混淆了，不过混淆的还凑合，能看的，不像之前的神秘符号(输入法都输不出来的)。开整：</p><p>这里不管它怎样命名，反正就一个按钮，这个按钮肯定是关键，直接跟：</p><p>来到了wjan6g1aXIJQJJbfuT这个类：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820044620388.png" alt="image-20240820044620388"></p><p>一眼没看见啥，就看见一个Running…，跑啥呢，我跟：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820044857745.png" alt="image-20240820044857745"></p><p>一跟不要紧，这是干嘛呀，直接看最后：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045108808.png" alt="image-20240820045108808"></p><p>哎呦一看这是有戏，其实没啥，就是一个文件读写的过程：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045230620.png" alt="image-20240820045230620"></p><p>本来想着走走捷径，创建文件了是不，直接找文件，我就直接运行，找找文件，</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045454470.png" alt="image-20240820045454470"></p><p>我这是直接一顿找，哥们，哥们，答案就在眼前：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045540203.png" alt="image-20240820045540203"></p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045609776.png" alt="image-20240820045609776"></p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045625992.png" alt="image-20240820045625992"></p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045712112.png" alt="image-20240820045712112"></p><p>这是个啥，发现这写入的内容与时间有关，之后回去，看看写入的方法：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820045922691.png" alt="image-20240820045922691"></p><p>随机点开一个这里有时间戳，还有写入的字符，这想要看完整的写入内容，就需要用frida将所有的写入的动作的字符存在一个变量中。说干就干，直接截取这个apk的写入内容就行。写了脚本，进行调试：这个脚本就是直接调用写的方法就行，主要是在写的过程中要注意，写入文件的格式。将每个字符变为字符串，然后发现，它没写入一个字符，就要换行，不利于我们缓存，想想，直接忽略换行符。（注意这里还有空格）</p><p>脚本：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">RandomAccessFile</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.RandomAccessFile&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> readData = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> writeData = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挂钩write()方法</span></span><br><span class="line">    <span class="title class_">RandomAccessFile</span>.<span class="property">write</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">buffer, off, len</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用原始write方法</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">write</span>(buffer, off, len);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印写入的内容</span></span><br><span class="line">        <span class="keyword">var</span> data = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = off; i &lt; off + len; i++) &#123;</span><br><span class="line">            data += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(buffer[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        data = data.<span class="title function_">replace</span>(<span class="regexp">/\n/g</span>, <span class="string">&quot;&quot;</span>); <span class="comment">// 将换行符替换为空字符串</span></span><br><span class="line">        writeData += data;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Write data: &quot;</span> + data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重置计时器</span></span><br><span class="line">        <span class="keyword">if</span> (timer !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Complete data: &quot;</span> + writeData);</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后不能让它运行不停，设个时钟，到点重传，不对，是到点，下班。脚本效果：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820051254577.png" alt="image-20240820051254577"></p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820052759299.png" alt="image-20240820052759299"></p><p>一长句话：Sdaj ukq snepa w lnkcnwi bkn Wjznkez, ukq qoa pda Knwyha Fwrw pkkho bkn aranupdejc, wjz wp pda ranu ajz, ukq lqod w xqppkj wjz owu, ‘Ykjranp pdeo pk Wjznkez bkniwp.’ BHWC{Yd4hh4jc3-5QyY33Z3z-y0jp1jQa!} Ajfku pda peju qjatlhwejwxha oaykjz. Ukq ywj hawnj sdwparan ukq swjp!</p><p>一看就是又进行了某种位移加密，直接怒嗦：</p><p><img src="/./../image/%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%9A%84%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/image-20240820053956285.png" alt="image-20240820053956285"></p><p>发现在凯撒的位移22下出现了flag：</p><p>mode1 #22: When you write a program for Android, you use the Oracle Java tools for everything, and at the very end, you push a button and say, ‘Convert this to Android format.’ FLAG{Ch4ll4ng3-5UcC33D3d-c0nt1nUe!} Enjoy the tiny unexplainable second. You can learn whatever you want!</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这两题都是相较基础的题目，主要看对于hook的初步使用，不用不知道到，用了才知道有多舒服，其实在这之前已经做过相关的题目了，所以在处理这两题来说才会想到直接用frida来搞。后来其实如果是脚本能力好的，可以根据时间戳和字符，直接获取，之后按照时间戳的大小来对字符进行排序，所以看到这个方法，感觉解题的方法还是很多的，主要看哪个操作自己更熟练一些了。但是无论哪种，还是要写脚本的。第二题，本来想着走捷径，结果上了一课。在frida等工具上还要加强使用，如果可以动手拆开apk文件，重新在打个标签，就好玩了，虽然之前游戏逆向，都会这么做一下，但是在android开发上还没有尝试，等有时间，一定要好好玩玩！！！</p><p>最后文末，欢迎大家来小站一起交流学习，多多评论。同同行对话其乐无穷，同大佬交流受益匪浅。虽然没人关注小站。但是橘子还是想去多多结识不同的人。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> android </tag>
            
            <tag> friada </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
